#include "Base.h"
#include <iostream>

analysis_t whichAnalysis(id_level_t id_level){

  switch (id_level){
    case (SS_veto_noiso_v1):
    case (SS_veto_v1):
    case (SS_fo_noiso_v1):
    case (SS_fo_v1):
    case (SS_medium_noiso_v1):
    case (SS_medium_v1):
    case (SS_tight_noiso_v1):
    case (SS_tight_v1):
    case (SS_veto_noiso_v2):
    case (SS_veto_v2):
    case (SS_fo_noiso_v2):
    case (SS_fo_v2):
    case (SS_medium_noiso_v2):
    case (SS_medium_v2):
    case (SS_tight_noiso_v2):
    case (SS_tight_v2):
    case (SS_veto_noiso_noip_v3):
    case (SS_veto_noiso_v3):
    case (SS_veto_v3):
    case (SS_fo_looseMVA_noiso_noip_v3):
    case (SS_fo_looseMVA_noiso_v3):
    case (SS_fo_looseMVA_v3):
    case (SS_fo_noiso_noip_v3):
    case (SS_fo_noiso_v3):
    case (SS_fo_v3):
    case (SS_medium_looseMVA_noip_v3):
    case (SS_medium_noip_v3):
    case (SS_medium_noiso_v3):
    case (SS_medium_v3):
    case (SS_tight_noiso_v3):
    case (SS_tight_v3):
    case (SS_veto_noiso_noip_v4):
    case (SS_veto_noiso_v4):
    case (SS_veto_v4):
    case (SS_fo_looseMVA_noiso_noip_v4):
    case (SS_fo_looseMVA_noiso_v4):
    case (SS_fo_looseMVA_v4):
    case (SS_fo_noiso_noip_v4):
    case (SS_fo_noiso_v4):
    case (SS_fo_v4):
    case (SS_medium_looseMVA_noip_v4):
    case (SS_medium_noip_v4):
    case (SS_medium_noiso_v4):
    case (SS_medium_v4):
    case (SS_tight_noiso_v4):
    case (SS_tight_v4):
    case (SS_veto_noiso_noip_v5):
    case (SS_veto_noiso_v5):
    case (SS_veto_v5):
    case (SS_fo_looseMVA_noiso_noip_v5):
    case (SS_fo_looseMVA_noiso_v5):
    case (SS_fo_looseMVA_v5):
    case (SS_fo_noiso_noip_v5):
    case (SS_fo_noiso_v5):
    case (SS_fo_v5):
    case (SS_medium_looseMVA_noip_v5):
    case (SS_medium_noip_v5):
    case (SS_medium_noiso_v5):
    case (SS_medium_v5):
    case (SS_tight_noiso_v5):
    case (SS_tight_v5):
    case (SS_fo_looseMVA_noiso_noip_no3chg_v5):
    case (SS_fo_noiso_no3chg_v5):
    case (SS_fo_looseMVA_noiso_no3chg_v5):
    case (SS_fo_looseMVA_no3chg_v5):
    case (SS_medium_noiso_no3chg_v5):
    case (SS_medium_no3chg_v5):
    case (SS_veto_noiso_v6):
    case (SS_veto_v6):
    case (SS_veto_noiso_noip_v6):
    case (SS_fo_noiso_v6):
    case (SS_fo_looseMVA_noiso_v6):
    case (SS_fo_looseMVA_v6):
    case (SS_fo_looseMVA_no3chg_v6):
    case (SS_fo_looseMVA_noiso_noip_v6):
    case (SS_medium_noiso_v6):
    case (SS_medium_v6):
    case (SS_medium_no3chg_v6):
    case (SS_fo_looseMVA_noiso_no3chg_v6):
      return SS;
      break;
    case (HAD_veto_noiso_v1):
    case (HAD_veto_v1):
    case (HAD_loose_noiso_v1):
    case (HAD_loose_v1):
    case (HAD_medium_noiso_v1):
    case (HAD_medium_v1):
    case (HAD_tight_noiso_v1):
    case (HAD_tight_v1):
    case (HAD_veto_noiso_v2):
    case (HAD_veto_v2):
    case (HAD_loose_noiso_v2):
    case (HAD_loose_v2):
    case (HAD_medium_noiso_v2):
    case (HAD_medium_v2):
    case (HAD_tight_noiso_v2):
    case (HAD_tight_v2):
    case (HAD_veto_noiso_v3):
    case (HAD_veto_v3):
    case (HAD_loose_noiso_v3):
    case (HAD_loose_v3):
    case (HAD_medium_noiso_v3):
    case (HAD_medium_v3):
    case (HAD_tight_noiso_v3):
    case (HAD_tight_v3):
    case (HAD_veto_noiso_v4):
    case (HAD_veto_v4):
    case (HAD_loose_noiso_v4):
    case (HAD_loose_v4):
    case (HAD_medium_noiso_v4):
    case (HAD_medium_v4):
    case (HAD_tight_noiso_v4):
    case (HAD_tight_v4):
      return HAD;
      break;
    case (STOP_veto_v1):
    case (STOP_loose_v1):
    case (STOP_medium_v1):
    case (STOP_tight_v1):
    case (STOP_sync_v1):
    case (STOP_veto_v2):
    case (STOP_loose_v2):
    case (STOP_medium_v2):
    case (STOP_tight_v2):
    case (STOP_veto_v3):
    case (STOP_loose_v3):
    case (STOP_medium_v3):
    case (STOP_tight_v3):
      return STOP;
      break;
    case (ZMET_mediumMu_v3):
    case (ZMET_mediumMu_veto_v3):
    case (ZMET_mediumMu_v2):
    case (ZMET_mediumMu_veto_v2):
    case (ZMET_mediumMu_v1):
    case (ZMET_mediumMu_noiso_v1):
    case (ZMET_tightMVA_v2):
    case (ZMET_tightMVA_noiso_v2):
    case (ZMET_tightMVA_v1):
    case (ZMET_tightMVA_noiso_v1):
    case (ZMET_looseMVA_v1):
    case (ZMET_looseMVA_noiso_v1):
    case (ZMET_loose_v2):
    case (ZMET_loose_noiso_v2):
    case (ZMET_loose_v1):
    case (ZMET_loose_noiso_v1):
    case (ZMET_tight_v2):
    case (ZMET_tight_noiso_v2):
    case (ZMET_tight_v1):
    case (ZMET_tight_noiso_v1):
    case (ZMET_photon_v3):
    case (ZMET_photon_v2):
    case (ZMET_photon_v1):
      return ZMET;
      break;
    case (WW_veto_noiso_v1):
    case (WW_veto_v1):
    case (WW_fo_noiso_v1):
    case (WW_fo_v1):
    case (WW_medium_noiso_v1):
    case (WW_medium_v1):
    case (WW_tight_noiso_v1):
    case (WW_tight_v1):
    case (WW_veto_noiso_noip_v1):
    case (WW_fo_looseMVA_noiso_noip_v1):
    case (WW_fo_looseMVA_noiso_v1):
    case (WW_fo_looseMVA_v1):
    case (WW_medium_noip_v1):
    case (WW_fo_noiso_noip_v1):
    case (WW_medium_looseMVA_noip_v1):
    case (WW_veto_noiso_v2):
    case (WW_veto_v2):
    case (WW_fo_noiso_v2):
    case (WW_fo_v2):
    case (WW_medium_noiso_v2):
    case (WW_medium_v2):
    case (WW_fo_noiso_v3):
    case (WW_fo_v3):
    case (WW_medium_noiso_v3):
    case (WW_medium_v3):
      return WW;
      break;
    case (VVV_cutbased_veto_bak1):             //electrons only
    case (VVV_cutbased_veto_noiso_bak1):       //electrons only
    case (VVV_cutbased_veto_noiso_noip_bak1):  //electrons only
    case (VVV_cutbased_veto):
    case (VVV_cutbased_veto_noiso):
    case (VVV_cutbased_veto_noiso_noip):
    case (VVV_cutbased_fo):
    case (VVV_cutbased_fo_noiso):
    case (VVV_cutbased_tight_noiso):
    case (VVV_cutbased_tight):
    case (VVV_MVAbased_tight_noiso):            //electrons only
    case (VVV_MVAbased_tight):                  //electrons only
    case (VVV_baseline):
    case (VVV_cutbased_veto_v2):
    case (VVV_cutbased_veto_noiso_v2):
    case (VVV_cutbased_fo_v2):
    case (VVV_cutbased_fo_noiso_v2):
    case (VVV_cutbased_tight_v2):
    case (VVV_cutbased_tight_noiso_v2):
    case (VVV_cutbased_3l_fo_v2):
    case (VVV_cutbased_3l_fo_noiso_v2):
    case (VVV_cutbased_3l_tight_v2):
    case (VVV_cutbased_3l_tight_noiso_v2):
    case (VVV_cutbased_veto_v3):
    case (VVV_cutbased_veto_noiso_v3):
    case (VVV_cutbased_fo_v3):
    case (VVV_cutbased_fo_noiso_v3):
    case (VVV_cutbased_tight_v3):
    case (VVV_cutbased_tight_noiso_v3):
    case (VVV_cutbased_3l_fo_v3):
    case (VVV_cutbased_3l_fo_noiso_v3):
    case (VVV_cutbased_3l_tight_v3):
    case (VVV_cutbased_3l_tight_noiso_v3):
    case (VVV_cutbased_veto_v4):
    case (VVV_cutbased_veto_noiso_v4):
    case (VVV_cutbased_fo_v4):
    case (VVV_cutbased_fo_noiso_v4):
    case (VVV_cutbased_tight_v4):
    case (VVV_cutbased_tight_noiso_v4):
    case (VVV_cutbased_3l_fo_v4):
    case (VVV_cutbased_3l_fo_noiso_v4):
    case (VVV_cutbased_3l_tight_v4):
    case (VVV_cutbased_3l_tight_noiso_v4):
      return VVV;
      break;

    default:
      std::cout << "Warning! Not sure which analysis you're doing!" << std::endl;
      std::cout << "Update \"whichAnalysis\" in base.cc with this id_level: " << id_level << std::endl;
      return POG;
  }

}
